---
description: 
globs: 
alwaysApply: true
---
# Project Path Standards

## Project Location Requirements

### 1. Absolute Path Standards
**Full Path**: `/Users/hei02/Desktop/Main/baccarat/improved_baccarat_assistant`

**Rule**: All file operations must be relative to this absolute project root directory. Never operate outside this path.

### 2. Relative Path Standards
**Relative Path**: `baccarat/improved_baccarat_assistant`

**Rule**: When referencing the project in documentation or relative contexts, always use this complete path format including the baccarat prefix.

### 3. Working Directory Requirements
**Current Working Directory**: `/Users/hei02/Desktop/Main/baccarat/improved_baccarat_assistant`

**Rule**: All terminal commands and file operations must be executed from this exact directory. Verify location before any operations.

## File Creation Standards

### 1. Path Validation Requirements
**Rule**: Before creating any file, validate the path is within the correct project directory structure.

**Valid Path Patterns**: All paths must start with `baccarat/improved_baccarat_assistant/` followed by appropriate subdirectory
**Source Code Paths**: Use `src/` subdirectory with proper category organization
**Rule Files**: Use `.cursor/rules/` subdirectory for rule documentation
**Public Assets**: Use `public/` subdirectory for static assets
**Configuration**: Place config files in project root with proper naming

**Invalid Path Patterns**: Never use incomplete paths missing project prefix, wrong base directories, or paths outside project scope

### 2. Tool Usage Standards
**Rule**: When using file creation/editing tools, always specify the complete relative path from workspace root.

**Path Format**: Always use `baccarat/improved_baccarat_assistant/` prefix for all file operations
**Component Creation**: Follow established component path patterns with category subdirectories
**Rule Creation**: Use proper rule file naming and location in `.cursor/rules/` directory
**Validation**: Verify path correctness before executing any file operations

### 3. Terminal Command Standards
**Rule**: All terminal commands must be executed from the correct working directory with proper path verification.

**Directory Navigation**: Always navigate to project root before executing commands
**Path Verification**: Use `pwd` command to confirm current location before operations
**Command Execution**: Use yarn commands from project root with proper relative paths
**Error Prevention**: Verify project structure exists before executing development commands

## Directory Structure Standards

### 1. Project Root Organization
**Rule**: Maintain strict project root structure with all required directories and configuration files.

**Source Directory**: Organize all source code within `src/` with proper subdirectory structure
**Component Organization**: Use category-based subdirectories for component organization
**Store Organization**: Place all Pinia stores in dedicated `stores/` subdirectory
**Composable Organization**: Organize reusable logic in `composables/` subdirectory
**Type Organization**: Centralize TypeScript definitions in `types/` subdirectory
**Utility Organization**: Place pure utility functions in `utils/` subdirectory
**Service Organization**: Organize business logic and API calls in `services/` subdirectory
**View Organization**: Place page-level components in `views/` subdirectory

### 2. Source Code Organization Standards
**Rule**: All source code must follow established directory structure with proper path patterns.

**Component Paths**: Use category-based organization with descriptive component names
**Store Paths**: Use descriptive store names with proper TypeScript file extensions
**Composable Paths**: Follow `use` prefix naming convention with descriptive functionality names
**Type Paths**: Use descriptive type names with proper TypeScript file extensions

### 3. Configuration File Standards
**Rule**: Configuration files must be placed in project root with correct naming and relative paths.

**Rule Files**: Use descriptive names with `.mdc` extension in `.cursor/rules/` directory
**Config Files**: Place all configuration files in project root with standard naming conventions
**Package Management**: Maintain `package.json` in project root with proper dependencies
**TypeScript Config**: Use proper `tsconfig.json` configuration in project root
**Build Config**: Maintain `vite.config.ts` in project root with proper build settings

## Error Prevention Standards

### 1. Path Validation Requirements
**Rule**: Implement comprehensive path validation before any file operations.

**Prefix Validation**: Verify all paths start with correct `baccarat/improved_baccarat_assistant/` prefix
**Directory Validation**: Confirm target directory exists before file creation
**Duplicate Prevention**: Check for existing files before creating new ones
**Convention Validation**: Ensure all paths follow established project structure conventions

### 2. Common Error Prevention
**Rule**: Avoid common path errors that have occurred in previous development sessions.

**Missing Prefix**: Never use incomplete paths without project prefix
**Wrong Base**: Avoid using incorrect base directory paths
**Incomplete Paths**: Always use complete path including baccarat prefix
**External Paths**: Never operate on paths outside project directory

### 3. Verification Standards
**Rule**: Use systematic verification commands to ensure correct project location and structure.

**Location Verification**: Use `pwd` command to verify current working directory
**Structure Verification**: Use `ls` command to verify project structure exists
**Package Verification**: Check `package.json` exists and contains correct project information
**Dependency Verification**: Ensure all required directories and files are present

## Development Workflow Standards

### 1. Session Initialization Requirements
**Rule**: Always follow systematic session initialization to ensure correct project setup.

**Directory Navigation**: Navigate to correct project directory as first step
**Location Verification**: Verify current location using system commands
**Structure Validation**: Check project structure exists and is complete
**Development Server**: Start development server only after verification complete

### 2. File Operation Standards
**Rule**: All file operations must use correct relative paths with proper validation.

**Read Operations**: Use complete relative paths for all file reading operations
**Create Operations**: Use complete relative paths for all file creation operations
**Edit Operations**: Use complete relative paths for all file editing operations
**Import Validation**: Ensure all imports use correct relative paths within project

### 3. Quality Assurance Requirements
**Rule**: Implement systematic quality assurance to prevent path-related errors.

**Location Monitoring**: Regularly verify all files are in correct locations
**Import Validation**: Check all imports use correct relative paths
**Structure Compliance**: Ensure all new files follow established directory structure
**Command Verification**: Confirm all terminal commands execute from correct working directory

This comprehensive system ensures consistent file management and prevents path-related errors that could disrupt development workflow while maintaining project organization and structure integrity.
