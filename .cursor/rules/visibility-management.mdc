---
description: 
globs: 
alwaysApply: true
---
# Visibility Management Standards

## Global Toggle System

### 1. Centralized Visibility Control
**Rule**: All visibility toggles must respect the global toggle mode and use centralized store methods for consistency.

**Global Toggle Behavior**: When global toggle is OFF, all individual sections are hidden regardless of their local state
**Individual Toggle Behavior**: Individual toggles only work when global toggle is ON
**Button State Consistency**: Toggle buttons show correct text based on global state, not just local state
**Disabled State**: Individual toggle buttons are disabled when global toggle is OFF

### 2. Store Methods for Visibility
**Rule**: Use store methods instead of direct state manipulation for all visibility operations.

**Toggle Method**: Use `store.toggleSectionVisibility(section, subsection)` instead of direct state assignment
**Button Text**: Use `store.getToggleButtonText(section, subsection)` for consistent button text
**Visibility Check**: Use `store.isVisible(section, subsection)` for conditional rendering
**Enable Check**: Use `store.isToggleEnabled()` to determine if individual toggles should be enabled

### 3. Button Implementation Standards
**Rule**: All toggle buttons must follow standardized patterns with proper accessibility and state management.

**Required Elements**: Include click handler, disabled state, CSS classes, title attribute, and dynamic button text
**Event Handling**: Use store methods for all click events with proper section/subsection parameters
**State Management**: Bind disabled state to global toggle status and show contextual tooltips
**Styling Standards**: Apply consistent disabled styles and hover effects using Tailwind utilities
**Accessibility**: Provide contextual help text that changes based on global toggle state

### 4. Section Registration Requirements
**Rule**: All new visibility sections must be registered in the store state and TypeScript interfaces.

**State Registration**: Add new sections to `ui.visibility` in store state with appropriate default values
**Type Definition**: Update the TypeScript interface to include new visibility sections
**Naming Convention**: Use camelCase for section names and subsection names
**Default Values**: Set sensible defaults (usually `true` for most sections)

## Implementation Standards

### 1. Toggle Button Implementation
**Rule**: Create toggle buttons that follow the established pattern with proper Vue directives and accessibility.

**Click Handling**: Use `@click` directive with store method calls including section and subsection parameters
**Disabled State**: Use `:disabled` binding with store's `isToggleEnabled()` method
**CSS Classes**: Apply consistent styling with disabled states and hover effects
**Dynamic Content**: Use store methods for button text and tooltip content
**Accessibility**: Include proper title attributes with contextual help text

### 2. Conditional Content Rendering
**Rule**: Use store visibility methods for all conditional content rendering with proper Vue directives.

**Visibility Directive**: Use `v-if` with store's `isVisible(section, subsection)` method
**Content Structure**: Wrap toggleable content in semantic containers with appropriate CSS classes
**Performance**: Use `v-if` for content that changes infrequently, `v-show` for frequent toggles
**Fallback Content**: Provide appropriate fallback content when sections are hidden

### 3. Header Integration Patterns
**Rule**: Integrate toggle buttons into section headers with consistent layout and styling.

**Layout Structure**: Use flexbox layouts with space-between for title and toggle button alignment
**Typography**: Apply consistent heading styles and button sizing relative to header hierarchy
**Spacing**: Maintain consistent margins and padding around toggle elements
**Responsive Design**: Ensure toggle buttons work properly across different screen sizes

## Store Architecture Requirements

### 1. State Structure Standards
**Rule**: Define visibility state with proper TypeScript interfaces and hierarchical organization.

**Global Toggle**: Include boolean flag for master visibility control
**Section Hierarchy**: Organize visibility state with section and subsection structure
**Type Safety**: Use TypeScript interfaces to define all visibility state shapes
**Default Values**: Provide sensible defaults for all visibility sections

### 2. Getter Implementation Standards
**Rule**: Implement computed getters that handle visibility logic and button text generation.

**Visibility Logic**: Create getters that respect global toggle state and individual section state
**Button Text Logic**: Generate appropriate button text based on current visibility state
**Enable Logic**: Determine when individual toggles should be enabled based on global state
**Performance**: Use computed properties for efficient reactivity

### 3. Action Implementation Standards
**Rule**: Implement actions that handle all visibility state changes with proper validation.

**Global Actions**: Provide methods to toggle and set global visibility mode
**Section Actions**: Implement methods to toggle and set individual section visibility
**Validation**: Include proper validation for section and subsection parameters
**State Consistency**: Ensure all state changes maintain consistency with global toggle behavior

## Accessibility Requirements

### 1. Keyboard Navigation Standards
**Rule**: All toggle buttons must be keyboard accessible with proper focus management.

**Tab Order**: Toggle buttons should be in logical tab order within their containers
**Focus Indicators**: Visible focus rings for keyboard navigation using Tailwind focus utilities
**Keyboard Activation**: Support Enter and Space key activation for all toggle buttons
**Screen Reader Support**: Proper ARIA labels and state announcements for visibility changes

### 2. Visual Feedback Standards
**Rule**: Provide clear visual feedback for all toggle states and interactions.

**Disabled State**: Clear visual indication when toggles are disabled using opacity and cursor styles
**Hover Effects**: Appropriate hover states for interactive elements with smooth transitions
**State Indication**: Clear visual difference between show/hide states in button text and styling
**Loading States**: Show loading indicators during state changes if operations are async

## Error Prevention Standards

### 1. Defensive Programming Requirements
**Rule**: Implement proper error handling and validation for all visibility operations.

**Parameter Validation**: Validate section and subsection existence before performing operations
**Type Safety**: Use TypeScript interfaces to prevent invalid section names at compile time
**Fallback Values**: Provide sensible defaults for missing configuration or invalid parameters
**Error Logging**: Log visibility-related errors with structured logging format for debugging

### 2. Development Guidelines
**Rule**: Follow consistent patterns to prevent visibility-related bugs and ensure maintainability.

**Code Review**: Review all visibility implementations for consistency with established patterns
**Testing Requirements**: Test visibility behavior with global toggle on/off and edge cases
**Documentation**: Document all new visibility sections and their purpose in code comments
**Migration Support**: Provide migration guides when changing visibility structure or API

This comprehensive system ensures consistent, accessible, and maintainable visibility management across the entire application while providing excellent user experience and developer productivity.
