---
description: 
globs: 
alwaysApply: true
---
# Vue 3 + TypeScript Standards

## Vue 3 Composition API Best Practices

### 1. Core Principles
- Use `setup()` function or `<script setup>` for component logic
- Utilize `ref` and `reactive` for reactive state management
- Implement computed properties with `computed()`
- Use `watch` and `watchEffect` for side effects
- Implement lifecycle hooks with `onMounted`, `onUpdated`, etc.
- Utilize `provide`/`inject` for dependency injection
- Use TypeScript for comprehensive type safety
- Implement proper props and emits definitions
- Utilize Vue 3's Teleport component when needed
- Use Suspense for async components
- Implement proper error handling with structured logging
- Follow Vue 3 style guide and naming conventions
- Use Vite for fast development and building

### 2. Folder Structure Standards
**Rule**: For complete folder structure and component organization standards, refer to `architecture.mdc` as the single source of truth.

**Key Reference**: All project structure, component naming conventions, and directory organization patterns are defined in the main architecture file.

## Component Standards Reference
**Rule**: For component structure, props, events, and accessibility patterns, refer to `vue-components.mdc` as the single source of truth.

**Component Structure**: See vue-components.mdc for mandatory component order and organization
**Props & Events**: See vue-components.mdc for props design patterns and event handling
**Accessibility**: See vue-components.mdc for comprehensive accessibility implementation
**Performance**: See vue-components.mdc for lazy loading and optimization patterns

## TypeScript Rules

### 1. Strict Typing
**Rule**: Never use `any` type and implement branded types for domain-specific values.

**Type Safety**: Use proper types or `unknown` instead of any, implement strict type checking
**Branded Types**: Create branded types for domain values (Probability, EdgePercentage, Confidence) - see `dry-principles.mdc` for comprehensive implementation patterns
**Type Validation**: Ensure all data structures have proper TypeScript interfaces
**Generic Usage**: Use generics for reusable type patterns and maintain type safety

### 2. Interface Design
**Rule**: Create descriptive, specific interfaces that clearly define data structures and avoid vague typing.

**Naming Convention**: Use descriptive names that indicate the interface purpose and data structure
**Property Definition**: Define all properties with appropriate types, use readonly for immutable data
**Method Signatures**: Include proper parameter and return types for all methods
**Documentation**: Add JSDoc comments for complex interfaces and business logic

### 3. Composable Return Types
**Rule**: Define explicit return types for composables with readonly state and clear method signatures.

**Return Structure**: Return object with readonly state references, computed properties, and action methods
**Type Safety**: Use TypeScript generics to maintain type safety through composable operations
**Method Typing**: Provide explicit parameter and return types for all composable methods
**State Management**: Ensure all reactive state is properly typed and exposed as readonly

## Vue 3 Patterns

### 1. Reactivity Best Practices
**Rule**: Use appropriate reactive patterns based on data type and usage requirements.

**State Management**: Use ref for primitive values, reactive for objects, computed for derived state
**Reactivity Preservation**: Ensure all state changes trigger Vue reactivity system properly
**Performance**: Use shallowRef for large objects that don't need deep reactivity
**Immutability**: Avoid direct mutations that can break reactivity tracking

### 2. Watchers with Structured Logging
**Rule**: Implement watchers with proper debouncing, structured logging, and performance considerations.

**Debouncing**: Use debounced watchers for expensive operations to limit execution frequency
**Logging**: Include structured logging in watchers to track state changes and operations
**Performance**: Use shallow watchers for large objects and appropriate flush timing
**Cleanup**: Properly handle watcher cleanup and avoid memory leaks

### 3. Error Handling with Structured Logging
**Rule**: Implement Result pattern for error handling with proper logging and type safety. For comprehensive Result pattern implementation, refer to `vue-components.mdc`.

**Result Pattern**: Use discriminated union types for success/error states with proper typing (see vue-components.mdc for detailed implementation)
**Error Logging**: Use structured logging format for all errors with relevant context
**Type Safety**: Maintain TypeScript type safety through error handling pipeline
**Recovery**: Provide error recovery mechanisms and user-friendly error messages

### 4. Lifecycle Hooks with Logging
**Rule**: Use Vue 3 lifecycle hooks with proper cleanup and structured logging.

**Hook Usage**: Use onMounted, onUpdated, onUnmounted for component lifecycle management
**Cleanup**: Implement proper cleanup in onBeforeUnmount to prevent memory leaks
**Error Boundaries**: Use onErrorCaptured for component error handling
**Logging**: Include structured logging for lifecycle events and component state changes

### 5. Provide/Inject Pattern
**Rule**: For comprehensive provide/inject patterns and dependency injection, refer to `vue-components.mdc` as the single source of truth.

**Key Reference**: All provide/inject implementation details, TypeScript typing, and error handling patterns are defined in the dedicated Vue components file.

## JSDoc Documentation Standards

### 1. Component Documentation
**Rule**: Document all components with comprehensive JSDoc including usage examples and prop descriptions.

**Component Description**: Provide clear description of component purpose and functionality
**Usage Examples**: Include practical examples showing how to use the component
**Props Documentation**: Document all props with types, descriptions, and default values
**Event Documentation**: Document all emitted events with payload types and descriptions

### 2. Composable Documentation
**Rule**: Document all composables with parameter descriptions, return value documentation, and usage examples.

**Function Description**: Provide clear description of composable purpose and functionality
**Parameter Documentation**: Document all parameters with types and descriptions
**Return Value Documentation**: Document return object structure and method signatures
**Usage Examples**: Include practical examples showing how to use the composable

## Tailwind CSS Integration

### 1. Directive Validation
**Rule**: Use valid Tailwind directives and custom component classes following established patterns.

**Directive Usage**: Use @tailwind, @apply, @layer directives appropriately
**Component Classes**: Create reusable component classes using @layer components
**Validation**: Ensure all Tailwind directives are properly configured and validated
**Performance**: Use @apply sparingly and prefer utility classes when possible

### 2. CSS Custom Properties
**Rule**: Use CSS custom properties with Vue's v-bind for dynamic styling instead of inline styles.

**Dynamic Values**: Use v-bind() to pass reactive values to CSS custom properties
**Performance**: Prefer CSS custom properties over computed style objects
**Maintainability**: Keep styling logic in CSS rather than JavaScript when possible
**Debugging**: Use CSS custom properties for easier debugging and development