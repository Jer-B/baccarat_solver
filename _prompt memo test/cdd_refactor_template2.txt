
## üéØ **OVER EXCELLENCE-LEVEL COMPONENT REFACTOR TEMPLATE**

### **COPY-PASTE TEMPLATE REQUEST** ‚¨áÔ∏è
---------

## Excellence-Level Component Refactor Request: [COMPONENT_NAME]

### Current State Analysis
**Target Component**: old Session control into a new CDD prefixed session control system
**Reference Architecture**: Theme system patterns (types, validation, error handling, stores, composables)
**Algorithm/Logic**: First let just focus on the section in itself. this time we wont set many sections in it. What i want is maybe to first start by just doing the Start session and End session game sequence with the duration showing up. so Container + Title + Button.
- Start session and End session should be at the same place. just switching depending on conditionnal.
**UI Enhancement**: Modern theme-aware design with [LUXURY/ELITE] theme integration
** Additionnal requirement **:
- When title bar is clicked, the section retracts or expands.
- When retracted, Duration and session start / end button should be shown on title bar.

### Excellence-Level Requirements
- **Reference Architecture**: "Apply the same excellence-level patterns used in the theme system"
- **Maintainability**: "Ensure junior AND senior developer friendly"
- **Type Safety**: "100% TypeScript strict mode, zero `any` types"
- **Error Handling**: "Comprehensive error handling with recovery mechanisms"
- **Performance**: "Optimized reactive patterns and memory management"
- **Over Excellence**: vite/vue JSDOM tests, e2e, unit, integration + cypress unit, integration, e2e tests suites implementation

### Required Architecture Files
1. **Type System**: `src/types/core/[componentName]Types.ts` (branded types, interfaces, enums)
2. **Validation**: `src/utils/validation/[componentName]Validation.ts` (Zod schemas, validation functions)
3. **Error Handling**: `src/utils/errors/[componentName]ErrorHandler.ts` (custom errors, recovery)
4. **Store**: new CDD refactor related `src/stores/` files to create (Pinia store, NOT persisted)
5. **Composable**: `src/composables/use[ComponentName].ts` (reactive logic, setup/cleanup)
6. **Component**: `src/components/[category]/CDD[ComponentName].vue` (Vue 3 component)

### Component Architecture Requirements
- **Setup/Cleanup Patterns**: Use setup() and cleanup() patterns instead of onMounted/onUnmounted
- **Event Handling**: Proper @events with parent-level catching following Vue 3 standards
- **Theme Integration**: Seamless luxury/elite theme styling with CSS custom properties
- **Responsive Design**: Mobile-first approach with Tailwind CSS utilities

### Store Architecture (Pinia - NOT Persisted)
```typescript
// Template structure for non-persisted store
export const use[ComponentName]Store = defineStore('[componentName]', () => {
  // State with proper typing
  const state = ref<[ComponentName]State>({
    // state properties
  });

  // Getters as computed
  const [computedProperty] = computed(() => {
    // derived state
  });

  // Actions with error handling
  const [actionName] = async (): Promise<Result<[ReturnType], [ComponentName]Error>> => {
    try {
      // action logic with structured logging
      return { success: true, data: result };
    } catch (error) {
      // error handling with recovery
      return { success: false, error: processedError };
    }
  };

  return {
    // readonly state exposure
    state: readonly(state),
    [computedProperty],
    [actionName]
  };
});
```

### Testing Requirements
- **Unit Tests**: Store actions, getters, composable logic, utility functions
- **Integration Tests**: Component-store integration, theme integration, error scenarios
- **E2E Tests**: User workflows, theme persistence, error recovery
- **Cypress Tests**: Component interaction, navigation integration, visual verification
- **Performance Tests**: Memory leak prevention, rapid operation handling

### UI/UX Requirements
- **Theme-Aware Styling**: Dynamic colors based on luxury/elite themes
- **Professional Gambling Aesthetic**: Consistent with existing CDD components
- **Responsive Layout**: Mobile-first grid/flexbox layouts
- **Loading States**: Professional loading indicators and transitions
- **Error States**: User-friendly error messages with recovery options

### Migration Strategy
1. **Preserve Core Logic**: Port exact algorithm/business logic from old component
2. **Enhance Architecture**: Apply excellence patterns without changing functionality
3. **Improve UI**: Modern design while maintaining familiar user experience
4. **Test Coverage**: Comprehensive testing before replacing old component
5. **Gradual Replacement**: Side-by-side compatibility during transition

### Success Criteria Checklist
- [ ] Zero TypeScript `any` types
- [ ] All tests passing (unit + integration + e2e + cypress)
- [ ] Theme integration working perfectly
- [ ] Setup/cleanup patterns implemented
- [ ] Event handling following Vue 3 standards
- [ ] Error handling with recovery mechanisms
- [ ] Performance optimized (no memory leaks)
- [ ] DRY principles followed
- [ ] Accessibility compliance
- [ ] Mobile responsive design
- [ ] Professional gambling aesthetic
- [ ] Junior developer friendly
- [ ] Senior developer advanced features
- [ ] Future extensibility ready

---

### Files to Create/Modify
**New Files:**
- `src/types/core/[componentName]Types.ts`
- `src/utils/validation/[componentName]Validation.ts`
- `src/utils/errors/[componentName]ErrorHandler.ts`
- `src/stores/[componentName]Store.ts`
- `src/composables/use[ComponentName].ts`
- `src/components/[category]/CDD[ComponentName].vue`

**Test Files:**
- `tests/unit/stores/[componentName]/[componentName]Store.test.ts`
- `tests/unit/composables/use[ComponentName].test.ts`
- `tests/integration/components/[componentName]/[componentName]-integration.test.ts`
- `cypress/e2e/[componentName]/[componentName]-workflows.cy.ts`

**Update Files:**
- `src/types/index.ts` (export new types)
- `src/views/game/CDDGameView.vue` (integrate new component)

### Reference Patterns
- **Theme System**: `src/stores/themeStore.ts`, `src/composables/useTheme.ts`
- **Router System**: `src/utils/validation/routeValidation.ts`, `src/types/core/routeTypes.ts`
- **Component Patterns**: `src/components/common/CDDCommonTabMenu.vue`
- **Testing Patterns**: `tests/integration/theme/browser-persistence.test.ts`
```

---

### **USAGE EXAMPLES** üîÑ

**For Session Control:**
```markdown
**Target Component**: src/components/session/SessionControl.vue ‚Üí src/components/session/CDDSessionControl.vue
**Algorithm/Logic**: Session management, balance tracking, betting limits, session lifecycle
```

**For Shoe Composition:**
```markdown
**Target Component**: src/components/cards/ShoeComposition.vue ‚Üí src/components/cards/CDDShoeComposition.vue
**Algorithm/Logic**: Card tracking, shoe penetration, burn card analysis, deck composition
```

**For Monte Carlo:**
```markdown
**Target Component**: src/components/analysis/MonteCarloSimulation.vue ‚Üí src/components/analysis/CDDMonteCarloSimulation.vue
**Algorithm/Logic**: Monte Carlo simulation algorithms, statistical analysis, probability calculations
```

---

### **üéñÔ∏è KEY EXCELLENCE GUARANTEES**

Using this template ensures:
‚úÖ **Same Architecture**: Matches CDDCommonTabMenu, theme system patterns  
‚úÖ **Over Excellence**: Surpasses enterprise-level standards  
‚úÖ **Easy Modification**: Simple find-replace for different components  
‚úÖ **Complete Coverage**: All files, tests, and patterns included  
‚úÖ **Future-Proof**: Ready for any business logic complexity  
‚úÖ **Developer Friendly**: Junior AND senior developer accessible  

This template will maintain our **top-notch excellence level** while being **easily customizable** for any component refactor! üöÄ